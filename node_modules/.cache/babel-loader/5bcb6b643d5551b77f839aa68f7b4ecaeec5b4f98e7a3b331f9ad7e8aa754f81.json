{"ast":null,"code":"var _jsxFileName = \"/Users/suraz/Documents/Full Stack Web Development BootCamp/Portfolio/portfolio-new/src/components/nightDarkToggle/LightDarkToggle.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { CiLight } from \"react-icons/ci\";\nimport { MdDarkMode } from \"react-icons/md\";\n\n/**\n * Represents a light/dark mode toggle button component.\n *\n * @component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LightDarkToggle = () => {\n  _s();\n  // State to track the current mode (light or dark)\n  const [islightMode, setLightMode] = useState(false);\n\n  // Function to toggle between light and dark mode\n  const toggleMode = () => {\n    setLightMode(!islightMode);\n  };\n\n  // Original colors\n  /*\n    --bg-color: #131a22;\n    --bg2-color: #232f3e19;\n    --hl-color: #48a3c6;\n    --hl2-color: #e47911;\n    --text-color: #f3f3f3;\n    --secondary-text-color: #999999;\n    --grey: #9f9f9f76;\n    --spacing: 50px;\n    --sm-spacing: 30px;\n      */\n\n  // Apply the selected mode's colors using CSS custom properties\n  useEffect(() => {\n    const colors = !islightMode ? {\n      // Light Colors\n      \"--bg-color\": \"#132a22\",\n      \"--bg2-color\": \"#232f3e19\",\n      \"--hl-color\": \"#48a3c6\",\n      \"--hl2-color\": \"#ea5b5c\",\n      \"--text-color\": \"#f3f3f3\",\n      \"--secondary-text-color\": \"#999999\",\n      \"--grey\": \"#9f9f9f76\"\n    } : {\n      // Dark Colors\n      \"--bg-color\": \"#101010\",\n      \"--bg2-color\": \"#121212\",\n      \"--hl-color\": \"#48a3c6\",\n      \"--hl2-color\": \"#ea5b5c\",\n      \"--text-color\": \"#FFFFFF\",\n      \"--secondary-text-color\": \"#9f9f9f\",\n      \"--grey\": \"#9f9f9f76\"\n    };\n    for (const property in colors) {\n      const value = colors[property];\n      document.documentElement.style.setProperty(property, value);\n    }\n  }, [islightMode]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"toggleMode\",\n    onClick: toggleMode,\n    children: islightMode ? /*#__PURE__*/_jsxDEV(CiLight, {\n      className: \"toggleIcon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(MdDarkMode, {\n      className: \"toggleIcon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(LightDarkToggle, \"Mpvhnd1cnfQTPsXRltLmylmSjBs=\");\n_c = LightDarkToggle;\nexport default LightDarkToggle;\nvar _c;\n$RefreshReg$(_c, \"LightDarkToggle\");","map":{"version":3,"names":["useState","useEffect","CiLight","MdDarkMode","jsxDEV","_jsxDEV","LightDarkToggle","_s","islightMode","setLightMode","toggleMode","colors","property","value","document","documentElement","style","setProperty","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suraz/Documents/Full Stack Web Development BootCamp/Portfolio/portfolio-new/src/components/nightDarkToggle/LightDarkToggle.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { CiLight } from \"react-icons/ci\";\nimport { MdDarkMode } from \"react-icons/md\";\n\n/**\n * Represents a light/dark mode toggle button component.\n *\n * @component\n */\n\nconst LightDarkToggle = () => {\n  // State to track the current mode (light or dark)\n  const [islightMode, setLightMode] = useState(false);\n\n  // Function to toggle between light and dark mode\n  const toggleMode = () => {\n    setLightMode(!islightMode);\n  };\n\n  // Original colors\n  /*\n    --bg-color: #131a22;\n    --bg2-color: #232f3e19;\n    --hl-color: #48a3c6;\n    --hl2-color: #e47911;\n    --text-color: #f3f3f3;\n    --secondary-text-color: #999999;\n    --grey: #9f9f9f76;\n    --spacing: 50px;\n    --sm-spacing: 30px;\n      */\n\n  // Apply the selected mode's colors using CSS custom properties\n  useEffect(() => {\n    const colors = !islightMode\n      ? {\n          // Light Colors\n          \"--bg-color\": \"#132a22\",\n          \"--bg2-color\": \"#232f3e19\",\n          \"--hl-color\": \"#48a3c6\",\n          \"--hl2-color\": \"#ea5b5c\",\n          \"--text-color\": \"#f3f3f3\",\n          \"--secondary-text-color\": \"#999999\",\n          \"--grey\": \"#9f9f9f76\",\n        }\n      : {\n          // Dark Colors\n          \"--bg-color\": \"#101010\",\n          \"--bg2-color\": \"#121212\",\n          \"--hl-color\": \"#48a3c6\",\n          \"--hl2-color\": \"#ea5b5c\",\n          \"--text-color\": \"#FFFFFF\",\n          \"--secondary-text-color\": \"#9f9f9f\",\n          \"--grey\": \"#9f9f9f76\",\n        };\n\n    for (const property in colors) {\n      const value = colors[property];\n      document.documentElement.style.setProperty(property, value);\n    }\n  }, [islightMode]);\n\n  return (\n    <button className=\"toggleMode\" onClick={toggleMode}>\n      {islightMode ? (\n        <CiLight className=\"toggleIcon\" />\n      ) : (\n        <MdDarkMode className=\"toggleIcon\" />\n      )}\n    </button>\n  );\n};\n\nexport default LightDarkToggle;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,UAAU,QAAQ,gBAAgB;;AAE3C;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,WAAW,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMU,UAAU,GAAGA,CAAA,KAAM;IACvBD,YAAY,CAAC,CAACD,WAAW,CAAC;EAC5B,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;EACAP,SAAS,CAAC,MAAM;IACd,MAAMU,MAAM,GAAG,CAACH,WAAW,GACvB;MACE;MACA,YAAY,EAAE,SAAS;MACvB,aAAa,EAAE,WAAW;MAC1B,YAAY,EAAE,SAAS;MACvB,aAAa,EAAE,SAAS;MACxB,cAAc,EAAE,SAAS;MACzB,wBAAwB,EAAE,SAAS;MACnC,QAAQ,EAAE;IACZ,CAAC,GACD;MACE;MACA,YAAY,EAAE,SAAS;MACvB,aAAa,EAAE,SAAS;MACxB,YAAY,EAAE,SAAS;MACvB,aAAa,EAAE,SAAS;MACxB,cAAc,EAAE,SAAS;MACzB,wBAAwB,EAAE,SAAS;MACnC,QAAQ,EAAE;IACZ,CAAC;IAEL,KAAK,MAAMI,QAAQ,IAAID,MAAM,EAAE;MAC7B,MAAME,KAAK,GAAGF,MAAM,CAACC,QAAQ,CAAC;MAC9BE,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAACL,QAAQ,EAAEC,KAAK,CAAC;IAC7D;EACF,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAQa,SAAS,EAAC,YAAY;IAACC,OAAO,EAAET,UAAW;IAAAU,QAAA,EAChDZ,WAAW,gBACVH,OAAA,CAACH,OAAO;MAACgB,SAAS,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAElCnB,OAAA,CAACF,UAAU;MAACe,SAAS,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACrC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEb,CAAC;AAACjB,EAAA,CA7DID,eAAe;AAAAmB,EAAA,GAAfnB,eAAe;AA+DrB,eAAeA,eAAe;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}